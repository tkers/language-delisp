'scopeName': 'source.delisp'
'name': 'Delisp'
'fileTypes': ['dl']
'foldingStartMarker': '\\(\\s*$'
'foldingStopMarker': '^\\s*\\)'
'patterns': [
  {
    'include': '#constant'
  }
  {
    'include': '#special'
  }
  {
    'include': '#primitive'
  }
  {
    'include': '#keyword'
  }
  {
    'include': '#symbol'
  }
  {
    'include': '#string'
  }
  {
    'include': '#vector'
  }
  {
    'include': '#record'
  }
]
'repository':
  'string':
    'begin': '"'
    'end': '"'
    'name': 'string.quoted.double.delisp'
  'symbol':
    'patterns': [
      {
        'match': '\\b[^\\s]+\\b'
        'name': 'meta.symbol.delisp'
      }
    ]
  'keyword':
    'patterns': [
      {
        'match': '([\\s\\(\\)\\[\\]\\{\\}])(:[^\\s]+)\\b'
        'captures':
          2:
            'name': 'entity.tag.name.delisp'
      }
    ]
  'special':
    'patterns': [
      {
        'match': '\\(\\s*(define)\\s+(.+?)[\\s\\)]'
        'captures':
          1:
            'name': 'keyword.control.delisp'
          2:
            'name': 'entity.function.name.delisp'
      }
      {
        'match': '\\(\\s*(export)\\s+(.+?)[\\s\\)]'
        'captures':
          1:
            'name': 'keyword.control.delisp'
          2:
            'name': 'entity.function.name.delisp'
      }
      {
        'match': '\\b(lambda|if|let|do|the|type|cases|case|match|values)\\b'
        'name': 'keyword.control.delisp'
      }
    ]
  'primitive':
    'patterns': [
      {
        'match': '\\b(map|fold|filter|print|cons|append|string-append|reverse|length|get|set|pair|fst|snd)\\b'
        'name': 'support.function.delisp'
      }
    ]
  'constant':
    'patterns': [
      {
        'match': '\\b(none)\\b'
        'name': 'constant.language.nil.delisp'
      }
      {
        'match': '\\b(true|false)\\b'
        'name': 'constant.language.boolean.delisp'
      }
      {
        'match': '\\b([0-9]+)\\b'
        'name': 'constant.numeric.delisp'
      }
    ]
  'vector':
    'begin': '\\['
    'end': '\\]'
    'name': 'meta.vector.delisp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'record':
    'begin': '\\{'
    'end': '\\}'
    'name': 'meta.record.delisp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
