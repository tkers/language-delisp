'scopeName': 'source.delisp'
'name': 'Delisp'
'fileTypes': ['dl']
'foldingStartMarker': '\\(\\s*$'
'foldingStopMarker': '^\\s*\\)'
'patterns': [
  {
    'include': '#constant'
  }
  {
    'include': '#special'
  }
  {
    'include': '#primitive'
  }
  {
    'include': '#keyword'
  }
  {
    'include': '#symbol'
  }
  {
    'include': '#string'
  }
  {
    'include': '#vector'
  }
  {
    'include': '#record'
  }
]
'repository':
  'string':
    'begin': '"'
    'end': '"'
    'name': 'string.quoted.double.delisp'
  'symbol':
    'patterns': [
      {
        'match': '\\b[^\\s]+\\b'
        'name': 'meta.symbol.delisp'
      }
    ]
  'keyword':
    'patterns': [
      {
        'match': '[^\\B:](:[^\\s]+)\\b'
        'captures':
          1:
            'name': 'entity.tag.name.delisp'
      }
    ]
  'special':
    'patterns': [
      {
        'match': '\\(\\s*(define)\\s+(.+?)[\\s\\)]'
        'captures':
          1:
            'name': 'keyword.control.delisp'
          2:
            'name': 'entity.function.name.delisp'
      }
      {
        'match': '\\(\\s*(export)\\s+(.+?)[\\s\\)]'
        'captures':
          1:
            'name': 'keyword.control.delisp'
          2:
            'name': 'entity.function.name.delisp'
      }
      {
        'match': '\\b(case|cases|do|if|lambda|let|match|multiple-value-bind|the|type|values)\\b'
        'name': 'keyword.control.delisp'
      }
    ]
  'primitive':
    'patterns': [
      {
        'match': '\\b(append|cons|filter|fold|fst|get|length|map|pair|print|reverse|set|snd|string-append|string-downcase|string-length|string-upcase|string=|zero?)\\b'
        'name': 'support.function.delisp'
      }
      {
        'match': '\\b(and|not|or)\\b'
        'name': 'support.function.delisp'
      }
    ]
  'constant':
    'patterns': [
      {
        'match': '\\b(none)\\b'
        'name': 'constant.language.nil.delisp'
      }
      {
        'match': '\\b(true|false)\\b'
        'name': 'constant.language.boolean.delisp'
      }
      {
        'match': '\\b([0-9]+)\\b'
        'name': 'constant.numeric.delisp'
      }
      {
        'match': '\\b(nil)\\b'
        'name': 'constant.language.delisp'
      }
    ]
  'vector':
    'begin': '\\['
    'end': '\\]'
    'name': 'meta.vector.delisp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'record':
    'begin': '\\{'
    'end': '\\}'
    'name': 'meta.record.delisp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
